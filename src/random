<v-btn  icon="skip_previous">прошлый</v-btn>
            <v-btn   icon="stop">стоп</v-btn>
            <v-btn   icon="play_circle_filled">играть</v-btn>
            <v-btn   icon="pause_circle_filled">пауза</v-btn>
            <v-btn   icon="skip_next">следующий</v-btn>


    try {
                const responce = await MusicService.getListOfMusic(from, size);
                for( var i = 0; i < responce.length; i++ ){
                    responce[i].display=true
                    /*
                    const requestData = {
                        method: 'GET',
                        url: `/api/music/stream`,
                        params: {
                            'id': responce[i].id,
                        }
                    }
                    ApiService.setHeader()
                    try {
                        const resp = await ApiService.customRequest(requestData)
                        console.log(resp)
                        let url = window.URL.createObjectURL(resp.data)
                        responce[i].howl = new Howl({
                            src: url
                        })
                    } catch (error) {
                        console.log(error)
                    }
                     */
                    responce[i].howl=new Howl({
                        src:[`https://springbootapptest22.herokuapp.com/api/music/stream?id=`+responce[i].id],
                        headers: [
                            {
                                name: 'Authorization',
                                value: 'Bearer ' + TokenService.getToken()
                            }]
                        ,
                        html5:true,
                        volume:1,
                        buffer: true,
                    })
                }

                commit('list', responce)
                return true
            } catch (e) {
                return false
            }


result => {
                            Promise.all(snapshotToArray(result).map(snapshot => {


                            var blob = new Blob([this.musicar.data], { type: 'audio/*' });
                            var objectUrl = window.URL.createObjectURL(blob);
                            //this.howler.unload()
                            this.howler._src=[objectUrl]
                            let type =this.getPlayList[this.getNowPlayedId].mime.split('/')[1]
                            this.howler._format=[type]
                            //this.howler.load()
                            this.howler.play()
                        },
                        error => {
                            console.log(error)
                        }
                    );
